package adt.bst.extended;

import java.util.Comparator;

import adt.bst.BSTImpl;
import adt.bst.BSTNode;
import util.Util;

/**
 * Implementacao de SortComparatorBST, uma BST que usa um comparator interno em
 * suas funcionalidades e possui um metodo de ordenar um array dado como
 * parametro, retornando o resultado do percurso desejado que produz o array
 * ordenado.
 * 
 * @author Adalberto
 *
 * @param <T>
 */
public class SortComparatorBSTImpl<T extends Comparable<T>> extends BSTImpl<T> implements SortComparatorBST<T> {

	private Comparator<T> comparator;

	public SortComparatorBSTImpl(Comparator<T> comparator) {
		super();
		this.comparator = comparator;
	}

	@Override
	public void insert(T element) {
		insert(this.getRoot(), element);
	}

	@SuppressWarnings("unchecked")
	private void insert(BSTNode<T> node, T element) {
		if (node.isEmpty()) {
			node.setData(element);
			BSTNode<T> nodeAuxLeft = new BSTNode.Builder<T>().parent(node).build();
			BSTNode<T> nodeAuxRight = new BSTNode.Builder<T>().parent(node).build();

			node.setLeft(nodeAuxLeft);
			node.setRight(nodeAuxRight);

		} else {
			if (getComparator().compare(element, node.getData()) > 0) {
				insert((BSTNode<T>) node.getRight(), element);
			} else if (getComparator().compare(element, node.getData()) < 0) {
				insert((BSTNode<T>) node.getLeft(), element);
			}
		}
	}

	@Override
	public BSTNode<T> search(T element) {
		BSTNode<T> node = null;

		if (element != null) {
			node = search(this.getRoot(), element);
		}

		return node;

	}

	private BSTNode<T> search(BSTNode<T> node, T element) {
		BSTNode<T> foundNode = new BSTNode<T>();

		if (!node.isEmpty()) {
			if (getComparator().compare(node.getData(), element) < 0) {
				foundNode = search((BSTNode<T>) node.getRight(), element);
			} else if (getComparator().compare(node.getData(), element) > 0) {
				foundNode = search((BSTNode<T>) node.getLeft(), element);
			} else {
				foundNode = node;
			}
		}
		return foundNode;
	}

	
	@Override
	public T[] sort(T[] array) {
		T[] result;
		if (!this.getRoot().isEmpty()) {
			remove(this.getRoot().getData());
			result = sort(array);
		
		} else {
			
			for (int i = 0; i <array.length; i++) {
				insert(array[i]);
			}
			result = order();
		}
		return result;
	}

	@Override
	public T[] reverseOrder() {
		T[] array = Util.makeArrayOfComparable(size());
		return reverseOrder(this.getRoot(), array);
	}

	private T[] reverseOrder(BSTNode<T> node, T[] array) {
		if (!node.isEmpty()) {
			reverseOrder((BSTNode<T>) node.getRight(), array);
			array = insertArray(node.getData(), array);
			reverseOrder((BSTNode<T>) node.getLeft(), array);
		}

		return array;
	}

	public Comparator<T> getComparator() {
		return comparator;
	}

	public void setComparator(Comparator<T> comparator) {
		this.comparator = comparator;
	}

}
